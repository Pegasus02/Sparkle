// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2019
// @generated from protobuf file "bilibili/app/interface/v1/teenagers.proto" (package "bilibili.app.interface.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class ModeStatusReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.interface.v1.ModeStatusReply", [
            { no: 1, name: "user_models", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserModel }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.userModels = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.interface.v1.UserModel user_models */ 1:
                    message.userModels.push(UserModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.interface.v1.UserModel user_models = 1; */
        for (let i = 0; i < message.userModels.length; i++)
            UserModel.internalBinaryWrite(message.userModels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.interface.v1.ModeStatusReply
 */
export const ModeStatusReply = new ModeStatusReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserModel$Type extends MessageType {
    constructor() {
        super("bilibili.app.interface.v1.UserModel", [
            { no: 2, name: "mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "policy", kind: "message", T: () => Policy }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.mode = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mode */ 2:
                    message.mode = reader.string();
                    break;
                case /* bilibili.app.interface.v1.Policy policy */ 5:
                    message.policy = Policy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string mode = 2; */
        if (message.mode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mode);
        /* bilibili.app.interface.v1.Policy policy = 5; */
        if (message.policy)
            Policy.internalBinaryWrite(message.policy, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.interface.v1.UserModel
 */
export const UserModel = new UserModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Policy$Type extends MessageType {
    constructor() {
        super("bilibili.app.interface.v1.Policy", [
            { no: 1, name: "interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.interval = 0n;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 interval */ 1:
                    message.interval = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 interval = 1; */
        if (message.interval !== 0n)
            writer.tag(1, WireType.Varint).int64(message.interval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.interface.v1.Policy
 */
export const Policy = new Policy$Type();
