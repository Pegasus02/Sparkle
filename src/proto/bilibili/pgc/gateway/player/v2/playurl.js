// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2019
// @generated from protobuf file "bilibili/pgc/gateway/player/v2/playurl.proto" (package "bilibili.pgc.gateway.player.v2", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayViewReply", [
            { no: 5, name: "view_info", kind: "message", T: () => ViewInfo },
            { no: 6, name: "play_ext_conf", kind: "message", T: () => PlayAbilityExtConf }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.ViewInfo view_info */ 5:
                    message.viewInfo = ViewInfo.internalBinaryRead(reader, reader.uint32(), options, message.viewInfo);
                    break;
                case /* bilibili.pgc.gateway.player.v2.PlayAbilityExtConf play_ext_conf */ 6:
                    message.playExtConf = PlayAbilityExtConf.internalBinaryRead(reader, reader.uint32(), options, message.playExtConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.pgc.gateway.player.v2.ViewInfo view_info = 5; */
        if (message.viewInfo)
            ViewInfo.internalBinaryWrite(message.viewInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pgc.gateway.player.v2.PlayAbilityExtConf play_ext_conf = 6; */
        if (message.playExtConf)
            PlayAbilityExtConf.internalBinaryWrite(message.playExtConf, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayViewReply
 */
export const PlayViewReply = new PlayViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewInfo$Type extends MessageType {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.ViewInfo", [
            { no: 8, name: "try_watch_prompt_bar", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tryWatchPromptBar = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes try_watch_prompt_bar */ 8:
                    message.tryWatchPromptBar = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes try_watch_prompt_bar = 8; */
        if (message.tryWatchPromptBar.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.tryWatchPromptBar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.ViewInfo
 */
export const ViewInfo = new ViewInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAbilityExtConf$Type extends MessageType {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.PlayAbilityExtConf", [
            { no: 3, name: "cast_tips", kind: "message", T: () => CastTips }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.pgc.gateway.player.v2.CastTips cast_tips */ 3:
                    message.castTips = CastTips.internalBinaryRead(reader, reader.uint32(), options, message.castTips);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.pgc.gateway.player.v2.CastTips cast_tips = 3; */
        if (message.castTips)
            CastTips.internalBinaryWrite(message.castTips, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.PlayAbilityExtConf
 */
export const PlayAbilityExtConf = new PlayAbilityExtConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CastTips$Type extends MessageType {
    constructor() {
        super("bilibili.pgc.gateway.player.v2.CastTips", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.pgc.gateway.player.v2.CastTips
 */
export const CastTips = new CastTips$Type();
