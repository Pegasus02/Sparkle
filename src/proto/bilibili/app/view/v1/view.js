// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2019
// @generated from protobuf file "bilibili/app/view/v1/view.proto" (package "bilibili.app.view.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class ViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewReply", [
            { no: 4, name: "req_user", kind: "message", T: () => ReqUser },
            { no: 10, name: "relates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate },
            { no: 23, name: "label", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 30, name: "cms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 31, name: "cm_config", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 41, name: "cm_ipad", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 50, name: "special_cell_new", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.relates = [];
        message.label = new Uint8Array(0);
        message.cms = [];
        message.cmConfig = new Uint8Array(0);
        message.cmIpad = new Uint8Array(0);
        message.specialCellNew = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.ReqUser req_user */ 4:
                    message.reqUser = ReqUser.internalBinaryRead(reader, reader.uint32(), options, message.reqUser);
                    break;
                case /* repeated bilibili.app.view.v1.Relate relates */ 10:
                    message.relates.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes label */ 23:
                    message.label = reader.bytes();
                    break;
                case /* repeated bytes cms */ 30:
                    message.cms.push(reader.bytes());
                    break;
                case /* bytes cm_config */ 31:
                    message.cmConfig = reader.bytes();
                    break;
                case /* bytes cm_ipad */ 41:
                    message.cmIpad = reader.bytes();
                    break;
                case /* repeated bytes special_cell_new */ 50:
                    message.specialCellNew.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.ReqUser req_user = 4; */
        if (message.reqUser)
            ReqUser.internalBinaryWrite(message.reqUser, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Relate relates = 10; */
        for (let i = 0; i < message.relates.length; i++)
            Relate.internalBinaryWrite(message.relates[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bytes label = 23; */
        if (message.label.length)
            writer.tag(23, WireType.LengthDelimited).bytes(message.label);
        /* repeated bytes cms = 30; */
        for (let i = 0; i < message.cms.length; i++)
            writer.tag(30, WireType.LengthDelimited).bytes(message.cms[i]);
        /* bytes cm_config = 31; */
        if (message.cmConfig.length)
            writer.tag(31, WireType.LengthDelimited).bytes(message.cmConfig);
        /* bytes cm_ipad = 41; */
        if (message.cmIpad.length)
            writer.tag(41, WireType.LengthDelimited).bytes(message.cmIpad);
        /* repeated bytes special_cell_new = 50; */
        for (let i = 0; i < message.specialCellNew.length; i++)
            writer.tag(50, WireType.LengthDelimited).bytes(message.specialCellNew[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewReply
 */
export const ViewReply = new ViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqUser$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReqUser", [
            { no: 9, name: "elec_plus_btn", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.elecPlusBtn = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes elec_plus_btn */ 9:
                    message.elecPlusBtn = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes elec_plus_btn = 9; */
        if (message.elecPlusBtn.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.elecPlusBtn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReqUser
 */
export const ReqUser = new ReqUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relate$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Relate", [
            { no: 28, name: "cm", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cm = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes cm */ 28:
                    message.cm = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes cm = 28; */
        if (message.cm.length)
            writer.tag(28, WireType.LengthDelimited).bytes(message.cm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Relate
 */
export const Relate = new Relate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewProgressReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewProgressReply", [
            { no: 1, name: "video_guide", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.videoGuide = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes video_guide */ 1:
                    message.videoGuide = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes video_guide = 1; */
        if (message.videoGuide.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.videoGuide);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewProgressReply
 */
export const ViewProgressReply = new ViewProgressReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TFInfoReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TFInfoReply", [
            { no: 1, name: "tips_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tf_toast", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "tf_panel_customized", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tipsId = 0n;
        message.tfToast = new Uint8Array(0);
        message.tfPanelCustomized = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tips_id */ 1:
                    message.tipsId = reader.int64().toBigInt();
                    break;
                case /* bytes tf_toast */ 2:
                    message.tfToast = reader.bytes();
                    break;
                case /* bytes tf_panel_customized */ 3:
                    message.tfPanelCustomized = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 tips_id = 1; */
        if (message.tipsId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tipsId);
        /* bytes tf_toast = 2; */
        if (message.tfToast.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.tfToast);
        /* bytes tf_panel_customized = 3; */
        if (message.tfPanelCustomized.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.tfPanelCustomized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TFInfoReply
 */
export const TFInfoReply = new TFInfoReply$Type();
